import 'dart:convert';
import 'dart:developer';
import 'dart:io'; // For SocketException

import 'package:demo787/CRM/API/api_const.dart';
import 'package:demo787/CRM/Model/loginModel.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

import '../../Services/sharedPreferenceService.dart';

class AuthService {
  ApiConstant apiConstant = ApiConstant();
  // final String apiUrl = "http://139.59.22.128:3000/api/login";
  final String apiUrl = ApiConstant.api_base_url + ApiConstant.login;

  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  Future<String> userAuthentication(String password, String email) async {
    try {
      // Validate inputs before making API call
      if (email.isEmpty || password.isEmpty) {
        log("Email or password cannot be empty");
        return "Invalid input";
      }

      print("Logging in with email: $apiUrl");
      print("The email and pass are :$email, $password");

      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Content-Type": "application/json",
        },
        body: jsonEncode({
          "email": email,
          "password": password,
        }),
      );

      print(response);
      print(response.body);

      print(response.statusCode);

      // Check the HTTP response code
      if (response.statusCode == 200) {
        print("Authentication server");

        final Map<String, dynamic> jsonData = jsonDecode(response.body);

        Autogenerated data = Autogenerated.fromJson(jsonData);

        // Extract token and user details safely & store in secured storage
        String? token = data.message?.token;
        String? sim_slot = data.message?.user?.simSlot;
        //To store in the shared prefernces
        int? user_id = data.message?.user?.id;
        String? role = data.message?.user?.role;
        String? phone_number = data.message?.user?.phoneNumber;
        String? user_mail = data.message?.user?.userMail;
        String? userCompany = data.message?.user?.companyName;

        print(
            "The user details are: $userCompany, $user_mail, $role, $user_id, $sim_slot , $phone_number ");

        if (token == null || userCompany == null) {
          log("Invalid response structure: $data");
          return "Invalid response";
        }

        await _secureStorage.write(key: "token", value: token);
        String? storedToken = await _secureStorage.read(key: "token");
        print("Stored Token: $storedToken");

        await SharedPrefsHelper.saveUserData(
          email: user_mail,
          phone_number: phone_number,
          company: userCompany,
          user_id: user_id,
          sim_slot: sim_slot,
        );
        return "Successful";
      } else if (response.statusCode == 401) {
        return "Invalid credentials";
      } else if (response.statusCode == 500) {
        return "Server error";
      } else {
        print("Authentication server");
        log("Unexpected response: ${response.body}");
        return "Failed";
      }
    } on SocketException {
      log("No internet connection");
      return "No internet";
    } on FormatException {
      log("Invalid JSON response");
      return "Invalid response format";
    } catch (e) {
      log("Unexpected error: $e");
      return "Error";
    }
  }

  // Function to get the stored token securely
  Future<String?> getToken() async {
    print("access token granred!!!");
    return await _secureStorage.read(key: "token");
  }
}
